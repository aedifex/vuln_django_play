stages:
  - test
  - build
  - coverage
  - scan
  - dast
  - deploy

test:
  stage: test
  image: python:3.7-buster
  script:
    # This configures the test stuff
    - apt-get update -qy
    - apt-get install -y python-dev python-pip
    - pip install -r src/requirements.txt
    - flake8 vuln_django --max-line-length=127
    - cd src
    - python manage.py migrate
    - python manage.py test
    - coverage run --source='.' manage.py test
    - coverage report -m
    - coverage-badge
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

docker-build:
  stage: build
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  script:
   - docker build -t vuln_django:latest .

hawk_scan_execute:
  stage: scan
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  script:
    - docker build -t vuln_django:latest .
    - docker network create scan_net
    - docker pull stackhawk/hawkscan:latest
    - docker run --detach -p 8020:8020 --network scan_net --name vuln-django --rm vuln_django:latest
    - |
      docker run --network scan_net --volume $(pwd):/hawk:rw --tty --rm \
        --env API_KEY="hawk.${HAWK_API_ID}.${HAWK_API_SECRET}" \
        --env BRANCH=GitLab:${CI_COMMIT_BRANCH} \
        --env NO_COLOR=true \
        stackhawk/hawkscan:latest stackhawk.yml stackhawk-gitlab.yml

gitlab-scan:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  stage: scan
  variables:
    DAST_WEBSITE: http://vuln-django:8020
    DAST_AUTH_URL: /admin/login/
    DAST_USERNAME: admin
    DAST_PASSWORD: adminpassword
    DAST_USERNAME_FIELD: username
    DAST_PASSWORD_FIELD: password
    DAST_AUTH_EXCLUDE_URLS: http://vuln-django/admin/logout/
    DAST_FULL_SCAN_ENABLED: "true"
    GIT_STRATEGY: fetch
  script:
    - docker build -t vuln_django:latest .
    - docker network create scan_net
    - docker run --detach -p 8020:8020 --network scan_net --name vuln-django --rm vuln_django:latest
    - export DAST_WEBSITE=${DAST_WEBSITE}
    - |
      docker run --rm  --link vuln-django:vuln-django --network scan_net --volume $(pwd)/wrk:/zap/wrk:rw \
               --volume $(pwd)/wrk:/output:rw \
               registry.gitlab.com/gitlab-org/security-products/dast:${VERSION:-latest} /analyze -t ${DAST_WEBSITE} \
               --auth-url ${DAST_WEBSITE}${DAST_AUTH_URL} \
               --auth-username ${DAST_USERNAME} \
               --auth-password ${DAST_PASSWORD} \
               --auth-username-field ${DAST_USERNAME_FIELD} \
               --auth-password-field ${DAST_PASSWORD_FIELD} \
               --auth-exclude-urls ${DAST_AUTH_EXCLUDE_URLS} \
               --full-scan ${DAST_FULL_SCAN_ENABLED} \
               -r report.html


# zap_scan_execute:
#   stage: dast
#   variables:
#     DAST_WEBSITE: http://vuln-django
#     DAST_AUTH_URL: /admin/login
#     DAST_USERNAME: admin
#     DAST_PASSWORD: adminpassword
#     DAST_USERNAME_FIELD: username
#     DAST_PASSWORD_FIELD: password
#     DAST_AUTH_EXCLUDE_URLS: http://vuln-django/admin/logout
#     DAST_FULL_SCAN_ENABLED: "true"
#   image: docker:19.03.1
#   services:
#     - docker:19.03.1-dind
#   script:
#     - docker build -t vuln_django:latest .
#     - docker network create scan_net
#     - docker run --detach -p 8020:8020 --name vuln-django --rm --network scan_net vuln_django:latest
#     - |
#       docker run -it --rm  --network scan_net \
#         -t ${DAST_WEBSITE} \
#         --auth-url ${DAST_AUTH_URL} \
#         --auth-username ${DAST_USERNAME} \
#         --auth-password ${DAST_PASSWORD} \
#         --auth-username-field ${DAST_USERNAME_FIELD} \
#         --auth-password-field ${DAST_PASSWORD_FIELD}\
#         --auth-exclude-urls ${DAST_AUTH_EXCLUDE_URLS} \
#         --volume $(pwd)/wrk:/zap/wrk:rw \
#         --volume $(pwd)/wrk:/output:rw \
#         registry.gitlab.com/gitlab-org/security-products/dast:${VERSION:-latest} /zap-full-scan \
#         -r report.html
