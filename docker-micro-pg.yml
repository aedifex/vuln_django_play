# Builds the "postgres" stage, and adds the required PostgreSQL DB. You will need to run migrations manually, e.g.
# docker-compose
version: "3.7"

services:
  vuln-proxy:
    image: nginx
    volumes:
      - ./nginx.conf.postgres:/etc/nginx/nginx.conf:ro
      - ./static:/opt/app/vuln_django/static:ro
    ports:
      - 8020:8020
    depends_on:
      - vuln-django

  vuln-django:
    image: vuln_django:micro
    build:
      target: micro
    depends_on:
      - postgres
    environment:
      DJANGO_ALLOWED_HOSTS: localhost nginx
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_PASSWORD: adminpassword
      DJANGO_SUPERUSER_EMAIL: admin@example.com
      SQL_ENGINE: django.db.backends.postgresql
      SQL_HOST: postgres
      SQL_PORT: 5432
      SQL_DATABASE: django_db
      SQL_USER: django_user
      SQL_PASSWORD: django_password

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: django_db
      POSTGRES_USER: django_user
      POSTGRES_PASSWORD: django_password

# To run migrations:
#   docker-compose exec vuln-django python manage.py migrate
#
# To run tests:
#   docker-compose exec vuln-django python manage.py test
#
# To seed the database with random data:
#   docker-compose exec vuln-django python manage.py seed polls --number=5
